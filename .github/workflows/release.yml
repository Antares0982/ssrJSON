name: "Make Release"
on:
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Set to true to only print files without making changes'
        required: false
        default: 'true'

jobs:
  Linux-Build-And-Test-Wheel:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        pyver: ["9", "10", "11", "12", "13"]

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Set up Python 3.${{ matrix.pyver }}
      uses: actions/setup-python@v5
      with:
        python-version: 3.${{ matrix.pyver }}

    - name: Install nix
      uses: cachix/install-nix-action@master

    - name: Setup cachix
      uses: cachix/cachix-action@master
      with:
        name: antares0982

    - name: Build Wheel
      id: build-wheel
      run: |
        nix build .#ssrjson-wheel-py3${{ matrix.pyver }}
        echo "ARTIFACT_NAME=result/$(ls result)" >> $GITHUB_OUTPUT

    - name: Print Wheel Hash
      run: |
        sha256sum ${{ steps.build-wheel.outputs.ARTIFACT_NAME }} | awk '{print $1}' > sha256sum.txt
        cat sha256sum.txt

    - name: Install Wheel
      run: |
        python -m pip install ${{ steps.build-wheel.outputs.ARTIFACT_NAME }}

    - name: Print Location
      run: |
        python -c "import ssrjson;print(ssrjson.__file__)"

    - name: Run Python Tests
      run: |
        python -m pip install -r requirements.txt
        python -m pytest --random-order python-test

    - name: Upload Wheel To Artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-ssrjson-wheel-python3${{ matrix.pyver }}
        path: ${{ steps.build-wheel.outputs.ARTIFACT_NAME }}

  Build-Tarball:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Install nix
      uses: cachix/install-nix-action@master

    - name: Setup cachix
      uses: cachix/cachix-action@master
      with:
        name: antares0982

    - name: Build Tarball
      id: build-tarball
      run: |
        nix build .#ssrjson-tarball
        echo "ARTIFACT_NAME=result/$(ls result)" >> $GITHUB_OUTPUT

    - name: Print Tarball Hash
      run: |
        sha256sum ${{ steps.build-tarball.outputs.ARTIFACT_NAME }} | awk '{print $1}' > sha256sum.txt
        cat sha256sum.txt

    - name: Upload Tarball To Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ssrjson-tarball
        path: ${{ steps.build-tarball.outputs.ARTIFACT_NAME }}

  Linux-Test-Tarball:
    runs-on: ubuntu-latest
    needs: Build-Tarball
    strategy:
      fail-fast: true
      matrix:
        pyver: ["9", "10", "11", "12", "13"]

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Set up Python 3.${{ matrix.pyver }}
      uses: actions/setup-python@v5
      with:
        python-version: 3.${{ matrix.pyver }}

    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: ssrjson-tarball
        path: ./dist

    - name: Install Tarball
      run: |
        ARTIFACT_NAME=dist/$(ls dist)
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        python -m pip install $ARTIFACT_NAME

    - name: Print Location
      run: |
        python -c "import ssrjson;print(ssrjson.__file__)"

    - name: Run Python Tests
      run: |
        python -m pip install -r requirements.txt
        python -m pytest --random-order python-test

  Windows-Build-And-Test-Wheel:
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        pyver: ["9", "10", "11", "12", "13"]

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Set up Python 3.${{ matrix.pyver }}
      uses: actions/setup-python@v5
      with:
        python-version: 3.${{ matrix.pyver }}

    - name: Build Wheel
      run: |
        .\dev_tools\build-package.bat

    - name: Install Wheel
      run: |
        $whl = Get-ChildItem -Path dist -Filter *.whl | Select-Object -First 1 -ExpandProperty Name
        pip install "dist\$whl"

    - name: Print Location
      run: |
        python -c "import ssrjson;print(ssrjson.__file__)"

    - name: Run Python Tests
      run: |
        python -m pip install -r requirements.txt
        python -m pytest --random-order python-test

    - name: Upload Wheel To Artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-ssrjson-wheel-python3${{ matrix.pyver }}
        path: dist/*.whl

  Windows-Test-Tarball:
    runs-on: windows-latest
    needs: Build-Tarball
    strategy:
      fail-fast: true
      matrix:
        pyver: ["9", "10", "11", "12", "13"]

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Set up Python 3.${{ matrix.pyver }}
      uses: actions/setup-python@v5
      with:
        python-version: 3.${{ matrix.pyver }}

    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: ssrjson-tarball
        path: ./dist

    - name: Install Tarball
      run: |
        $tar = Get-ChildItem -Path dist -Filter *.tar.gz | Select-Object -First 1 -ExpandProperty Name
        python -m pip install "dist\$tar"

    - name: Print Location
      run: |
        python -c "import ssrjson;print(ssrjson.__file__)"

    - name: Run Python Tests
      run: |
        python -m pip install -r requirements.txt
        python -m pytest --random-order python-test

  Publish:
    runs-on: ubuntu-latest
    needs:
      - Linux-Test-Tarball
      - Windows-Test-Tarball
      - Linux-Build-And-Test-Wheel
      - Windows-Build-And-Test-Wheel
    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        token: '${{ secrets.ACTION_GITHUB_TOKEN }}'

    - name: Read dry-run input
      run: echo "DRY_RUN=${{ github.event.inputs['dry-run'] }}" >> $GITHUB_ENV

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
        path: ./artifacts/
        pattern: "*ssrjson*"

    - name: Print all downloaded files
      run: |
        echo "All downloaded files:"
        find ./artifacts -type f

    - name: Read version from file
      id: get_version
      run: |
        VERSION=$(cat version_file)
        echo "Version is $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Dry Run - Skip release steps
      if: env.DRY_RUN == 'true'
      run: echo "Dry run mode, skipping release and tag steps."

    - name: Import GPG key
      id: import-gpg
      uses: crazy-max/ghaction-import-gpg@master
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        git_user_signingkey: true
        git_commit_gpgsign: true

    - name: Install twine
      run: |
        python -m pip install twine

    # Create and push git tag
    - name: Create and push git tag
      if: env.DRY_RUN != 'true'
      env:
        TAG_VERSION: ${{ env.VERSION }}
      run: |
        git config --global user.email "${{ steps.import-gpg.outputs.email }}"
        git config --global user.name "${{ steps.import-gpg.outputs.name }}"
        git tag $TAG_VERSION
        git push origin $TAG_VERSION

    - name: Create GitHub Release and upload artifacts
      if: env.DRY_RUN != 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: Release ${{ env.VERSION }}
        files: |
          ./artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.ACTION_GITHUB_TOKEN }}

    - name: Publish to PyPI
      if: env.DRY_RUN != 'true'
      run: |
        twine upload ./artifacts/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
